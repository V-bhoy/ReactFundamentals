** CLOSURES
A closure is when a function remembers the variables from the scope in which it was created,
even after that outer scope is gone.
A function bind with its parent lexical environment forms a closure.

ex. function x(){
   var a = 20;
   function y(){
      console.log(a);
   }
   return y;
}
var z = x(); // the function here is returned along with its lexical scope, and a here is the reference, it exists
z() --> 20              in the memory


USES:
1. Module Design Pattern
2. Currying
3. Data hiding, encapsulation
4. memoize

function z(){
  var c = 30
  function x(b){
     function y(){
        console.log(a, b, c);
     }
     let a = 20
     return y;
  }
  return x(10);
}
z()() --> 10, 20, 30
here y forms a closure , it remembers the variables of its parent even when the scope of z does not exist

Example for data hiding & encapsulation ->
 var count = 0;
 function increment(){
   count++;
 }
here count can be modified by anyone

function counter(){
   var count = 0;
   return function increment(){
      count++;
   }
}
counter()() --> here increment forms a closure along with the count variable
And count is not accessible since it is inside a function scope.



